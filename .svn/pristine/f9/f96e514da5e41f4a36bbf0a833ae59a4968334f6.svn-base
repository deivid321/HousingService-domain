package com.deivydas.voroneckis.database;

import com.deivydas.voroneckis.domain.Room;
import java.util.ArrayList;
import java.util.UUID;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import com.deivydas.voroneckis.database.IRoomDatabase;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author vdeiv
 */
public class SqlRoomDatabase implements IRoomDatabase {

    private EntityManagerFactory factory;
    private EntityManager manager;

    public SqlRoomDatabase(String name) {
        factory = Persistence.createEntityManagerFactory(name);
        manager = factory.createEntityManager();
    }

    public void closeConnection() throws DatabaseException {
        try {
            manager.close();
            factory.close();
        } catch (Exception e) {
            throw new DatabaseException(e.getMessage(), e);
        }
    }

    @Override
    public void add(Room room) throws DatabaseException { //TODO Exceptions
        try {
            manager.getTransaction().begin();
            manager.persist(room);
            manager.flush();
            manager.getTransaction().commit();
            // return r.getId();
        } catch (Exception e) {
            throw new DatabaseException(e.getMessage(), e);
        }
    }

    @Override
    public void update(Room room) throws DatabaseException {
        try {
            manager.getTransaction().begin();
            manager.persist(room);
            manager.flush();
            manager.getTransaction().commit();
            // return r.getId();
        } catch (Exception e) {
            throw new DatabaseException(e.getMessage(), e);
        }
    }

    @Override
    public Room getRoomById(long id) {
        manager.getTransaction().begin();
        return manager.find(Room.class, id);
    }

    @Override
    public void delete(long id) {
        manager.getTransaction().begin();
        Room room = manager.find(Room.class, id);
        manager.remove(room);
        manager.flush();
        manager.getTransaction().commit();
    }

    @Override
    public ArrayList<Room> read() throws DatabaseException {
        try {
            Query query = manager.createQuery("select s from Student s"); //why select s
            return (ArrayList<Room>) query.getResultList();
        } catch (Exception e) {
            throw new DatabaseException(e.getMessage(), e);
        }
    }

}
